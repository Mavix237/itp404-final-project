{"ast":null,"code":"var _jsxFileName = \"/Users/mavix/Desktop/React ITP 404/final-project/src/Pages/LyricsLog.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'react-toastify/dist/ReactToastify.css';\nimport SongForm from '../Components/SongForm';\nimport { setDocumentTitle } from '../utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function LyricsLog() {\n  _s();\n  useEffect(() => {\n    setDocumentTitle('Add New Song');\n  }, []);\n  const [formData, setFormData] = useState({\n    title: '',\n    artist: '',\n    genre: '',\n    lyrics: '',\n    playlist: 'morning vibe',\n    isFavorite: false\n  });\n  const [errors, setErrors] = useState({});\n  const validateForm = () => {\n    const newErrors = {};\n    if (!formData.title.trim()) newErrors.title = 'Song title is required';\n    if (!formData.artist.trim()) newErrors.artist = 'Artist name is required'; // Updated error message\n    if (!formData.genre) newErrors.genre = 'Genre is required';\n    if (!formData.lyrics.trim()) newErrors.lyrics = 'Lyrics are required';\n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  //POST\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (validateForm()) {\n      try {\n        const response = await fetch('http://localhost:3001/songs', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(formData)\n        });\n        if (response.ok) {\n          toast.success('Song added successfully!');\n          // Clear form\n          setFormData({\n            title: '',\n            artist: '',\n            genre: '',\n            lyrics: '',\n            playlist: 'morning vibe',\n            isFavorite: false\n          });\n          window.location.href = '/songbook';\n        } else {\n          throw new Error('Failed to add song');\n        }\n      } catch (error) {\n        toast.error('Error adding song. Please try again.');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container mt-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add New Song\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(SongForm, {\n      formData: formData,\n      setFormData: setFormData,\n      handleSubmit: handleSubmit,\n      errors: errors,\n      buttonText: \"Publish\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n}\n_s(LyricsLog, \"6KjoUrlLXr3RBqB1PsqqBiZQnxs=\");\n_c = LyricsLog;\nvar _c;\n$RefreshReg$(_c, \"LyricsLog\");","map":{"version":3,"names":["React","useState","useEffect","toast","SongForm","setDocumentTitle","jsxDEV","_jsxDEV","LyricsLog","_s","formData","setFormData","title","artist","genre","lyrics","playlist","isFavorite","errors","setErrors","validateForm","newErrors","trim","Object","keys","length","handleSubmit","e","preventDefault","response","fetch","method","headers","body","JSON","stringify","ok","success","window","location","href","Error","error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","buttonText","_c","$RefreshReg$"],"sources":["/Users/mavix/Desktop/React ITP 404/final-project/src/Pages/LyricsLog.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { toast } from 'react-toastify'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'react-toastify/dist/ReactToastify.css'\nimport SongForm from '../Components/SongForm'\nimport { setDocumentTitle } from '../utils'\n\nexport default function LyricsLog() {\n  useEffect(() => {\n    setDocumentTitle('Add New Song');\n  }, []);\n  \n  const [formData, setFormData] = useState({\n    title: '',\n    artist: '',\n    genre: '',\n    lyrics: '',\n    playlist: 'morning vibe',\n    isFavorite: false\n  });\n  const [errors, setErrors] = useState({});\n\n  const validateForm = () => {\n    const newErrors = {}\n    if (!formData.title.trim()) newErrors.title = 'Song title is required'\n    if (!formData.artist.trim()) newErrors.artist = 'Artist name is required'  // Updated error message\n    if (!formData.genre) newErrors.genre = 'Genre is required'\n    if (!formData.lyrics.trim()) newErrors.lyrics = 'Lyrics are required'\n    setErrors(newErrors)\n    return Object.keys(newErrors).length === 0\n  }\n\n  //POST\n  const handleSubmit = async (e) => {\n    e.preventDefault()\n    if (validateForm()) {\n      try {\n        const response = await fetch('http://localhost:3001/songs', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/json' },\n          body: JSON.stringify(formData)\n        })\n\n        if (response.ok) {\n          toast.success('Song added successfully!')\n          // Clear form\n          setFormData({\n            title: '',\n            artist: '',\n            genre: '',\n            lyrics: '',\n            playlist: 'morning vibe',\n            isFavorite: false\n          })\n          window.location.href = '/songbook'\n        } else {\n          throw new Error('Failed to add song')\n        }\n      } catch (error) {\n        toast.error('Error adding song. Please try again.')\n      }\n    }\n  }\n\n  return (\n    <div className=\"container mt-4\">\n    <h1>Add New Song</h1>\n    <SongForm \n      formData={formData}\n      setFormData={setFormData}\n      handleSubmit={handleSubmit}\n      errors={errors}\n      buttonText=\"Publish\"\n    />\n  </div>\n);\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}